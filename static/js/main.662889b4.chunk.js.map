{"version":3,"sources":["lib/chatClient.js","lib/decrypt.js","components/EncryptedMessage.js","lib/encrypt.js","components/EncryptedMessageInput.js","components/Chat.js","lib/setUser.js","lib/generateKeyPair.js","components/Sender.js","components/Recipient.js","lib/deriveKey.js","components/KeyDeriver.js","App.js","serviceWorker.js","index.js"],"names":["StreamChat","text","derivedKey","a","string","atob","uintArray","Uint8Array","map","char","charCodeAt","algorithm","name","iv","TextEncoder","encode","window","crypto","subtle","decrypt","decryptedData","TextDecoder","decode","props","useState","message","setMessage","useEffect","work","encodedText","encrypt","encryptedData","String","fromCharCode","apply","base64Data","btoa","channelContext","useContext","ChannelContext","sendMessage","channelCid","newMessage","channel","overrideSubmitHandler","setChannel","chatClient","members","sender","recipient","client","theme","Message","e","EncryptedMessage","EncryptedMessageInput","id","keyPair","setUser","image","devToken","response","me","publicKeyJwk","JSON","stringify","disconnect","upsertUsers","generateKey","namedCurve","exportKey","publicKey","privateKey","privateKeyJwk","setKeyPair","setSender","error","setError","handleGenerateClick","generateKeyPair","value","onChange","target","onClick","parse","onSubmit","setRecipient","queryUsers","usersQuery","users","length","logIn","importKey","deriveKey","public","derive","App","setDerivedKey","Chat","KeyDeriver","Recipient","Sender","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.662889b4.chunk.js","sourcesContent":["import { StreamChat } from \"stream-chat\";\r\n\r\nexport default new StreamChat(\"4b8yshjzk88x\");\r\n","export default async (text, derivedKey) => {\r\n  try {\r\n    const string = atob(text);\r\n    const uintArray = new Uint8Array(\r\n      [...string].map((char) => char.charCodeAt(0))\r\n    );\r\n    const algorithm = {\r\n      name: \"AES-GCM\",\r\n      iv: new TextEncoder().encode(\"Initialization Vector\"),\r\n    };\r\n    const decryptedData = await window.crypto.subtle.decrypt(\r\n      algorithm,\r\n      derivedKey,\r\n      uintArray\r\n    );\r\n\r\n    return new TextDecoder().decode(decryptedData);\r\n  } catch (e) {\r\n    return `error decrypting message: ${e}`;\r\n  }\r\n};\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { MessageSimple } from \"stream-chat-react\"\r\nimport decrypt from \"../lib/decrypt\";\r\n\r\n// builds a message component that decrypts the message with derivedKey\r\nexport default props => {\r\n    const [message, setMessage] = useState(props.message);\r\n\r\n    useEffect(() => {\r\n        const work = async () => {\r\n            setMessage({\r\n                ...message,\r\n                text: await decrypt(props.message.text, props.derivedKey)\r\n            })\r\n        }\r\n        \r\n        work()\r\n    }, [props])\r\n\r\n    return (\r\n        <MessageSimple { ...{...props, message }} />\r\n    )\r\n}","export default async (text, derivedKey) => {\r\n  const encodedText = new TextEncoder().encode(text);\r\n\r\n  const encryptedData = await window.crypto.subtle.encrypt(\r\n    { name: \"AES-GCM\", iv: new TextEncoder().encode(\"Initialization Vector\") },\r\n    derivedKey,\r\n    encodedText\r\n  );\r\n\r\n  const uintArray = new Uint8Array(encryptedData);\r\n\r\n  const string = String.fromCharCode.apply(null, uintArray);\r\n\r\n  const base64Data = btoa(string);\r\n\r\n  return base64Data;\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { MessageInputLarge, ChannelContext } from \"stream-chat-react\";\r\nimport encrypt from \"../lib/encrypt\";\r\n\r\nexport default (props) => {\r\n  const channelContext = useContext(ChannelContext);\r\n  const sendMessage = async (message, channelCid) => {\r\n    const newMessage = {\r\n      ...message,\r\n      text: await encrypt(message.text, props.derivedKey),\r\n    };\r\n\r\n    await channelContext.channel.sendMessage(newMessage);\r\n  };\r\n\r\n  return <MessageInputLarge overrideSubmitHandler={sendMessage} {...props} />;\r\n};\r\n","import React, { useEffect, useState, memo } from \"react\";\r\nimport {\r\n  Chat,\r\n  Channel,\r\n  ChannelHeader,\r\n  Thread,\r\n  Window,\r\n  Message,\r\n} from \"stream-chat-react\";\r\nimport { MessageList, MessageInput, SendButton } from \"stream-chat-react\";\r\n\r\nimport chatClient from \"../lib/chatClient\";\r\n\r\nimport \"stream-chat-react/dist/css/index.css\";\r\nimport EncryptedMessage from \"./EncryptedMessage\";\r\nimport EncryptedMessageInput from \"./EncryptedMessageInput\";\r\n\r\nexport default (props) => {\r\n  const [channel, setChannel] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setChannel(\r\n      chatClient.channel(\"messaging\", {\r\n        members: [props.sender.sender, props.recipient.recipient],\r\n      })\r\n    );\r\n  }, [props]);\r\n\r\n  if (!channel) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <Chat client={chatClient} theme={\"messaging light\"}>\r\n      <Channel channel={channel}>\r\n        <Window>\r\n          <ChannelHeader />\r\n          <MessageList\r\n            Message={(e) => (\r\n              <EncryptedMessage {...e} derivedKey={props.derivedKey} />\r\n            )}\r\n          />\r\n          <EncryptedMessageInput derivedKey={props.derivedKey} />\r\n        </Window>\r\n        <Thread />\r\n      </Channel>\r\n    </Chat>\r\n  );\r\n};\r\n","import chatClient from \"./chatClient\";\r\n\r\nexport default async (id, keyPair) => {\r\n  const response = await chatClient.setUser(\r\n    {\r\n      id,\r\n      name: id,\r\n      image: `https://getstream.io/random_png/?id=cool-recipe-9&name=${id}`,\r\n    },\r\n    chatClient.devToken(id)\r\n  );\r\n\r\n  if (\r\n    response.me?.publicKeyJwk &&\r\n    response.me.publicKeyJwk != JSON.stringify(keyPair.publicKeyJwk)\r\n  ) {\r\n    await chatClient.disconnect();\r\n    throw \"This user id already exists with a different key pair. Choose a new user id or paste the correct key pair.\";\r\n  }\r\n\r\n  await chatClient.upsertUsers([\r\n    { id, publicKeyJwk: JSON.stringify(keyPair.publicKeyJwk) },\r\n  ]);\r\n};\r\n","export default async () => {\r\n  const keyPair = await window.crypto.subtle.generateKey(\r\n    {\r\n      name: \"ECDH\",\r\n      namedCurve: \"P-256\",\r\n    },\r\n    true,\r\n    [\"deriveKey\", \"deriveBits\"]\r\n  );\r\n\r\n  const publicKeyJwk = await window.crypto.subtle.exportKey(\r\n    \"jwk\",\r\n    keyPair.publicKey\r\n  );\r\n\r\n  const privateKeyJwk = await window.crypto.subtle.exportKey(\r\n    \"jwk\",\r\n    keyPair.privateKey\r\n  );\r\n\r\n  return { publicKeyJwk, privateKeyJwk };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport setUser from \"../lib/setUser\";\r\nimport generateKeyPair from \"../lib/generateKeyPair\";\r\n\r\nexport default (props) => {\r\n  const [keyPair, setKeyPair] = useState(null);\r\n  const [sender, setSender] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleKeyPairInputChange = (e) => {\r\n    try {\r\n      const keyPair = JSON.parse(e.target.value);\r\n      setKeyPair(keyPair);\r\n    } catch (e) {\r\n      setError(`Error reading key pair: ${e}`);\r\n      setKeyPair(keyPair);\r\n    }\r\n  };\r\n\r\n  const handleGenerateClick = async () => {\r\n    setKeyPair(await generateKeyPair());\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const work = async () => {\r\n      try {\r\n        await setUser(sender, keyPair);\r\n        props.onSubmit({ sender, keyPair });\r\n      } catch (e) {\r\n        setError(`Error logging in: ${e}`);\r\n      }\r\n    };\r\n\r\n    work();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>What is your id?</p>\r\n      <input value={sender} onChange={(e) => setSender(e.target.value)} />\r\n      <p>Avoid spaces and special characters.</p>\r\n      <p>\r\n        Paste your key pair below or <button onClick={handleGenerateClick}>generate</button> a new one.\r\n      </p>\r\n      <input\r\n        value={JSON.stringify(keyPair)}\r\n        onChange={handleKeyPairInputChange}\r\n      />\r\n      <p>\r\n        You need to save this key pair somewhere safe if you want to log in with\r\n        the same user id later.\r\n      </p>\r\n      <button onClick={handleSubmit}>Submit</button>\r\n      <p>{error}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport chatClient from \"../lib/chatClient\";\r\n\r\nexport default (props) => {\r\n  const [recipient, setRecipient] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleClick = () => {\r\n    const logIn = async () => {\r\n      try {\r\n        const usersQuery = await chatClient.queryUsers({ id: recipient });\r\n\r\n        if (usersQuery.users.length > 0) {\r\n          const publicKeyJwk = JSON.parse(usersQuery.users[0].publicKeyJwk);\r\n          props.onSubmit({ recipient, publicKeyJwk });\r\n        } else {\r\n          setError(\r\n            \"This user is not registered. Open a new tab and create it? :)\"\r\n          );\r\n        }\r\n      } catch (e) {\r\n        setError(`Error setting recipient: ${e.message}`);\r\n      }\r\n    };\r\n\r\n    logIn();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>Who do you want to chat with?</p>\r\n      <input value={recipient} onChange={(e) => setRecipient(e.target.value)} />\r\n      <br />\r\n      <br />\r\n      <button onClick={handleClick}>Submit</button>\r\n      <p>{error}</p>\r\n    </div>\r\n  );\r\n};\r\n","export default async (publicKeyJwk, privateKeyJwk) => {\r\n  const publicKey = await window.crypto.subtle.importKey(\r\n    \"jwk\",\r\n    publicKeyJwk,\r\n    {\r\n      name: \"ECDH\",\r\n      namedCurve: \"P-256\",\r\n    },\r\n    true,\r\n    []\r\n  );\r\n\r\n  const privateKey = await window.crypto.subtle.importKey(\r\n    \"jwk\",\r\n    privateKeyJwk,\r\n    {\r\n      name: \"ECDH\",\r\n      namedCurve: \"P-256\",\r\n    },\r\n    true,\r\n    [\"deriveKey\", \"deriveBits\"]\r\n  );\r\n\r\n  return await window.crypto.subtle.deriveKey(\r\n    { name: \"ECDH\", public: publicKey },\r\n    privateKey,\r\n    { name: \"AES-GCM\", length: 256 },\r\n    true,\r\n    [\"encrypt\", \"decrypt\"]\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport deriveKey from \"../lib/deriveKey\";\r\n\r\nexport default (props) => {\r\n  const { sender, recipient, onSubmit } = props;\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const derive = async () => {\r\n      try {\r\n        const derivedKey = await deriveKey(\r\n          recipient.publicKeyJwk,\r\n          sender.keyPair.privateKeyJwk\r\n        );\r\n        onSubmit(derivedKey);\r\n      } catch (e) {\r\n        setError(e.message);\r\n      }\r\n    };\r\n\r\n    derive();\r\n  }, [sender, recipient]);\r\n\r\n  return (\r\n    <div>\r\n      <p>Deriving key...</p>\r\n      <p>{error}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Chat from \"./components/Chat\";\r\nimport Sender from \"./components/Sender\";\r\nimport Recipient from \"./components/Recipient\";\r\nimport KeyDeriver from \"./components/KeyDeriver\";\r\n\r\nfunction App() {\r\n  const [sender, setSender] = useState(null);\r\n  const [recipient, setRecipient] = useState(null);\r\n  const [derivedKey, setDerivedKey] = useState(null);\r\n\r\n  if (!sender) return <Sender onSubmit={setSender} />;\r\n\r\n  if (!recipient) return <Recipient onSubmit={setRecipient} />;\r\n\r\n  if (!derivedKey)\r\n    return (\r\n      <KeyDeriver\r\n        sender={sender}\r\n        recipient={recipient}\r\n        onSubmit={setDerivedKey}\r\n      />\r\n    );\r\n\r\n  return <Chat sender={sender} recipient={recipient} derivedKey={derivedKey} />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}